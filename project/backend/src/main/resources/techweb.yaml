openapi: 3.0.3
info:
  title: Tech Web - OpenAPI 3.0
  description: Prova
  termsOfService: 'http://swagger.io/terms/'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.1
servers:
  - url: 'http://localhost:8084'

paths:
  /status:
    get:
      summary: Ritorna lo stato dell'applicazione
      tags:
        - public
      description: |
        Ritorna lo stato dell'applicazione in formato problem+json
      security: []
      responses:
        '200':
          description: Il servizio funziona correttamente
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'
        default:
          description: Il server ha riscontrato un problema
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'

  '/quiz/{uidQuiz}':
    get:
      tags:
        - quiz
      summary: Restituisce un quiz
      operationId: getQuizById
      parameters:
        - in: path
          name: uidQuiz
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizDto'
        default:
          description: Il server ha riscontrato un problema
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'

  /quiz:
    post:
      tags:
        - quiz
      summary: Crea un nuovo quiz
      operationId: createQuiz
      requestBody:
        description: I dettagli del quiz da creare
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuizDto'
      responses:
        '200':
          description: Quiz creato con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizDto'


  '/user/{idCustomer}':
    get:
      tags:
        - user
      summary: Restituisce un utente
      operationId: getCustomerById
      parameters:
        - in: path
          name: idCustomer
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDto'
        default:
          description: Il server ha riscontrato un problema
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'

  '/user/quiz/{idCustomer}':
    get:
      tags:
        - user
      summary: Restituisce i quiz creati dall'utente
      operationId: getQuizListByUser
      parameters:
        - in: path
          name: idCustomer
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuizDto'
        default:
          description: Il server ha riscontrato un problema
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'


  /questions/{idQuiz}:
    get:
      tags:
        - questions
      summary: Restituisce tutte le domande (aperte e/o chiuse) di un quiz
      operationId: getQuestionsByQuiz
      parameters:
        - in: path
          name: idQuiz
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionDto'
        default:
          description: Il server ha riscontrato un problema
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'

  /score/complete:
    post:
      tags:
        - score
      summary: Associa il punteggio ottenuto dall'utente
      operationId: completeQuiz
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScoreDto'
      responses:
        '200':
          description: Quiz completato con successo

  /score/customers/{idQuiz}:
    get:
      tags:
        - score
      summary: Restituisce i punteggi di tutti i giocatori che hanno sostenuto un quiz
      operationId: getScoresByQuiz
      parameters:
        - in: path
          name: idQuiz
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScoreDto'
        default:
          description: Il server ha riscontrato un problema
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'

  /score/quiz/{idCustomer}:
    get:
      tags:
        - score
      summary: Restituisce i punteggi ottenuti da un singolo giocatore
      operationId: getScoreByCustomer
      parameters:
        - in: path
          name: idCustomer
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScoreDto'
        default:
          description: Il server ha riscontrato un problema
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/Problem'

  /user:
    post:
      tags:
        - user
      summary: Crea un nuovo Utente
      operationId: createUser
      requestBody:
        description: I dettagli del quiz da creare
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerDto'
      responses:
        '200':
          description: Utente creato con successo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDto'



components:
  schemas:
    QuizDto:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
          example: A beatiful Quiz
        description:
          type: string
          example: Description of Quiz
        createdAt:
          type: string
          format: date-time
        createdBy:
          type: string
        maxErrors:
          type: integer
          format: int64
          example: 3
        isOpen:
          type: boolean
          example: true
        questions:
          type: array
          items:
            $ref: '#/components/schemas/QuestionDto'
          minLength: 1
          maxLength: 30
      required:
        - title
        - maxErrors
        - questions
        - createdBy

    CustomerDto:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        isLogged:
          type: boolean
        isAnonymous:
          type: boolean
      required:
        - isAnonymous


    ScoreDto:
      type: object
      properties:
        customerId:
          type: string
        customerUsername:
          type: string
        customerIslogged:
          type: boolean
        customerIsanonymous:
          type: boolean
        quizId:
          type: string
        quizTitle:
          type: string
        quizDescription:
          type: string
        quizCreatedat:
          type: string
        quizMaxerrors:
          type: integer
        quizIsopen:
          type: boolean
        completedaAt:
          type: string
          format: date-time
        score:
          type: integer
          format: int64
          example: 3
      required:
        - customerId
        - quizId
        - score

    QuestionDto:
      type: object
      properties:
        title:
          type: string
        id:
          type: string
        idQuiz:
          type: string
        answers:
          type: array
          items:
            $ref: '#/components/schemas/AnswerDto'
      required:
        - title
        - idQuiz
        - answers

    AnswerDto:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        isCorrect:
          type: boolean
        idQuestion:
          type: string
        idQuiz:
          type: string
      required:
        - idQuiz
        - idQuestion
        - text
        - isCorrect

    Problem:
      type: object
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        status:
          type: integer
          minimum: 100
          maximum: 600
        detail:
          type: string
        instance:
          type: string

  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://petstore3.swagger.io/oauth/authorize'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
