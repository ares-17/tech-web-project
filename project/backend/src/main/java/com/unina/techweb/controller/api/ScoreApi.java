/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.unina.techweb.controller.api;

import com.unina.techweb.dto.ScoreDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-24T15:27:33.160334992+02:00[Europe/Rome]")
@Validated
@Tag(name = "score", description = "the score API")
public interface ScoreApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /score/complete : Associa il punteggio ottenuto dall&#39;utente
     *
     * @param scoreDto  (required)
     * @return Quiz completato con successo (status code 200)
     */
    @Operation(
        operationId = "completeQuiz",
        summary = "Associa il punteggio ottenuto dall'utente",
        tags = { "score" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Quiz completato con successo")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/score/complete",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> completeQuiz(
        @Parameter(name = "ScoreDto", description = "", required = true) @Valid @RequestBody ScoreDto scoreDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /score/quiz/{idCustomer} : Restituisce i punteggi ottenuti da un singolo giocatore
     *
     * @param idCustomer  (required)
     * @return Ok (status code 200)
     *         or Il server ha riscontrato un problema (status code 200)
     */
    @Operation(
        operationId = "getScoreByCustomer",
        summary = "Restituisce i punteggi ottenuti da un singolo giocatore",
        tags = { "score" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ScoreDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ScoreDto.class))
            }),
            @ApiResponse(responseCode = "200", description = "Il server ha riscontrato un problema", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Problem.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/score/quiz/{idCustomer}",
        produces = { "application/json", "application/problem+json" }
    )
    default ResponseEntity<List<ScoreDto>> getScoreByCustomer(
        @Parameter(name = "idCustomer", description = "", required = true) @PathVariable("idCustomer") String idCustomer
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"score\" : 3, \"quizId\" : \"quizId\", \"quizCreatedat\" : \"quizCreatedat\", \"quizMaxerrors\" : 0, \"quizIsopen\" : true, \"customerId\" : \"customerId\", \"customerUsername\" : \"customerUsername\", \"customerIsanonymous\" : true, \"quizDescription\" : \"quizDescription\", \"quizTitle\" : \"quizTitle\", \"customerIslogged\" : true, \"completedaAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/problem+json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application/problem+json";
                    ApiUtil.setExampleResponse(request, "application/problem+json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /score/customers/{idQuiz} : Restituisce i punteggi di tutti i giocatori che hanno sostenuto un quiz
     *
     * @param idQuiz  (required)
     * @return Ok (status code 200)
     *         or Il server ha riscontrato un problema (status code 200)
     */
    @Operation(
        operationId = "getScoresByQuiz",
        summary = "Restituisce i punteggi di tutti i giocatori che hanno sostenuto un quiz",
        tags = { "score" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ScoreDto.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = ScoreDto.class))
            }),
            @ApiResponse(responseCode = "200", description = "Il server ha riscontrato un problema", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Problem.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/score/customers/{idQuiz}",
        produces = { "application/json", "application/problem+json" }
    )
    default ResponseEntity<List<ScoreDto>> getScoresByQuiz(
        @Parameter(name = "idQuiz", description = "", required = true) @PathVariable("idQuiz") String idQuiz
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"score\" : 3, \"quizId\" : \"quizId\", \"quizCreatedat\" : \"quizCreatedat\", \"quizMaxerrors\" : 0, \"quizIsopen\" : true, \"customerId\" : \"customerId\", \"customerUsername\" : \"customerUsername\", \"customerIsanonymous\" : true, \"quizDescription\" : \"quizDescription\", \"quizTitle\" : \"quizTitle\", \"customerIslogged\" : true, \"completedaAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/problem+json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application/problem+json";
                    ApiUtil.setExampleResponse(request, "application/problem+json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
