/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.unina.techweb.controller.api;

import com.unina.techweb.model.Problem;
import com.unina.techweb.model.Quiz;
import com.unina.techweb.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-20T15:49:36.060179726+02:00[Europe/Rome]")
@Validated
@Tag(name = "user", description = "the user API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /user/quiz/{uidUser} : Restituisce i quiz creati dall&#39;utente
     *
     * @param uidUser  (required)
     * @return Ok (status code 200)
     *         or Il server ha riscontrato un problema (status code 200)
     */
    @Operation(
        operationId = "getQuizByUser",
        summary = "Restituisce i quiz creati dall'utente",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Quiz.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Quiz.class))
            }),
            @ApiResponse(responseCode = "200", description = "Il server ha riscontrato un problema", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Problem.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/quiz/{uidUser}",
        produces = { "application/json", "application/problem+json" }
    )
    default ResponseEntity<List<Quiz>> getQuizByUser(
        @Parameter(name = "uidUser", description = "", required = true) @PathVariable("uidUser") String uidUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"uid\" : \"uid\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"isOpen\" : true, \"maxErrors\" : 3, \"createdBy\" : \"createdBy\", \"questions\" : [ \"questions\", \"questions\" ], \"description\" : \"Description of Quiz\", \"title\" : \"A beatiful Quiz\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/problem+json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application/problem+json";
                    ApiUtil.setExampleResponse(request, "application/problem+json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{uidUser} : Restituisce un utente
     *
     * @param uidUser  (required)
     * @return Ok (status code 200)
     *         or Il server ha riscontrato un problema (status code 200)
     */
    @Operation(
        operationId = "getUserById",
        summary = "Restituisce un utente",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ok", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "200", description = "Il server ha riscontrato un problema", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Problem.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Problem.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{uidUser}",
        produces = { "application/json", "application/problem+json" }
    )
    default ResponseEntity<User> getUserById(
        @Parameter(name = "uidUser", description = "", required = true) @PathVariable("uidUser") String uidUser
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"quiz\" : [ \"quiz\", \"quiz\" ], \"username\" : \"username\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/problem+json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application/problem+json";
                    ApiUtil.setExampleResponse(request, "application/problem+json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
